@model Portfolio.WebUI.Models.BlogTagsViewModel
@{
    ViewData["Title"] = "CreatePortfolioBlog";
    Layout = "~/Areas/Admin/Views/AdminLayout/AdminLayout.cshtml";
}

<link href="~/css/quill.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Arial&family=Courier+New&family=Georgia&family=Times+New+Roman&family=Verdana&family=Trebuchet+MS&family=Comic+Sans+MS&family=Impact&family=Tahoma&family=Helvetica&display=swap" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.core.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<style>
    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }

    .tag {
        background-color: #6c757d;
        color: white;
        border-radius: 15px;
        padding: 5px 10px;
        font-size: 14px;
        cursor: pointer;
    }

        .tag:hover {
            background-color: #5a6268;
        }

        .tag.selected {
            background-color: #007bff;
        }

    .tag-limit-message {
        color: #ff4d4d;
        font-size: 12px;
        margin-top: 5px;
    }

    .category-limit-message{
        color: #ff4d4d;
        font-size: 12px;
        margin-top: 5px;
    }
</style>

<div class="col-lg-12 grid-margin stretch-card" style="background-color: #191c24">
    <div class="card-body">
        <h4 class="card-title">Blog</h4>
        <p class="card-description">Blog Yazma/Ekleme Sayfası</p>
        <form id="blogForm" class="forms-sample">
            <div class="form-group">
                <label for="Title">Başlık</label>
                <input type="text" class="form-control" id="title" placeholder="Başlık" />
            </div>
            <div class="form-group">
                <label for="SubContent">Kısa Açıklama</label>
                <input type="text" class="form-control" id="SubContent" placeholder="Kısa Açıklama" />
            </div>
            <div class="form-group">
                <label for="CoverImage">Kapak Resmi</label>
                <input type="text" class="form-control" id="CoverImage" placeholder="Kapak Resmi" />
            </div>
            <div class="form-group">
                <label for="PublishDate">Yayımlanma Tarihi</label>
                <input type="date" class="form-control" id="PublishDate" placeholder="Yayımlanma Tarihi" />
            </div>
            <!-- Taglar kısmı -->
            <div class="form-group">
                <label>Etiketler</label>
                <div id="PortfolioBlogTags" class="tag-container">
                    @foreach (var item in Model.BlogTags)
                    {
                        <span class="tag" data-tag="@item.TagName" data-id="@item.PortfolioBlogTagId">@item.TagName</span>
                    }
                </div>
                <div id="tagLimitMessage" class="tag-limit-message" style="display: none;">Maksimum 4 etiket ekleyebilirsiniz!</div>
            </div>

            <!-- Kategoriler kısmı -->
            <div class="form-group">
                <label>Kategoriler</label>
                <div id="PortfolioBlogCategories" class="tag-container">
                    @foreach (var item in Model.BlogCategories)
                    {
                        <span class="tag" data-tag="@item.CategoryName" data-id="@item.BlogCategoryId">@item.CategoryName</span>
                    }
                </div>
                <div id="CategoryLimitMessage" class="category-limit-message" style="display:none;">Maksimum 4 kategori seçebilirsiniz!</div>
            </div>
            <div id="editor-container">
                <p></p>
            </div>
            <br />
            <button type="button" class="btn btn-primary mr-2" id="submitBtn">Ekle</button>
            <button type="button" class="btn btn-info" onclick="history.back()">Geri</button>
        </form>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tagContainer = document.getElementById("PortfolioBlogTags");
        const tagLimitMessage = document.getElementById("tagLimitMessage");
        const maxTags = 4;
        let selectedTags = [];

        const categoryContainer = document.getElementById("PortfolioBlogCategories");
        const categoryLimitMessage = document.getElementById("CategoryLimitMessage");
        const maxCategory = 4;
        let selectedCategories = [];

        // Etiket tıklama olayları
        tagContainer.addEventListener("click", function (event) {
            const clickedTag = event.target;

            // Tıklanan elemanın "tag" sınıfında olup olmadığını kontrol et
            if (clickedTag.classList.contains("tag")) {
                const tagName = clickedTag.getAttribute("data-tag");
                const tagId = parseInt(clickedTag.getAttribute("data-id")); // ID'yi integer'a çevir

                // Seçili etiket kaldırma
                if (clickedTag.classList.contains("selected")) {
                    clickedTag.classList.remove("selected");
                    selectedTags = selectedTags.filter(t => t.tagId !== tagId);
                }
                // Yeni etiket ekleme
                else {
                    if (selectedTags.length < maxTags) {
                        clickedTag.classList.add("selected");
                        selectedTags.push({
                            tagId: tagId,
                            tagName: tagName
                        });
                    }
                }

                // Etiket limiti kontrolü
                if (selectedTags.length >= maxTags) {
                    tagLimitMessage.style.display = "block";
                } else {
                    tagLimitMessage.style.display = "none";
                }
            }
        });

        // KAtegori tıklama olayları
        categoryContainer.addEventListener("click", function (event) {
            const clickedCategory = event.target;

            // Tıklanan elemanın "tag" sınıfında olup olmadığını kontrol et
            if (clickedCategory.classList.contains("tag")) {
                const categoryName = clickedCategory.getAttribute("data-tag");
                const categoryId = parseInt(clickedCategory.getAttribute("data-id")); // ID'yi integer'a çevir

                // Seçili etiket kaldırma
                if (clickedCategory.classList.contains("selected")) {
                    clickedCategory.classList.remove("selected");
                    selectedCategories = selectedCategories.filter(t => t.categoryId !== categoryId);
                }
                // Yeni etiket ekleme
                else {
                    if (selectedCategories.length < maxCategory) {
                        clickedCategory.classList.add("selected");
                        selectedCategories.push({
                            categoryId: categoryId,
                            categoryName: categoryName
                        });
                    }
                }

                // Etiket limiti kontrolü
                if (selectedCategories.length >= maxCategory) {
                    categoryLimitMessage.style.display = "block";
                } else {
                    categoryLimitMessage.style.display = "none";
                }
            }
        });
        // Form submit işlemi
        document.getElementById("submitBtn").addEventListener("click", function (event) {
            event.preventDefault();

            var content = quill.root.innerHTML;
            var title = document.getElementById('title').value;
            var subContent = document.getElementById('SubContent').value;
            var coverImage = document.getElementById('CoverImage').value;
            var publishDate = document.getElementById('PublishDate').value;

            // Seçili etiketlerin ID'lerini al
            var tagIds = selectedTags.map(tag => tag.tagId);
            var categoryIds = selectedCategories.map(category => category.categoryId);

            // Blog verisi oluştur
            var blogData = {
                Title: title,
                SubContent: subContent,
                Content: content,
                CoverImage: coverImage,
                PublishDate: publishDate,
                TagIds: tagIds || [],
                categoryIds: categoryIds|| [] 
            };


            // AJAX POST isteği
            $.ajax({
                url: '@Url.Action("CreatePortfolioBlog", "PortfolioBlog", new { area = "Admin" })',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(blogData),
                success: function (response) {
                    if (response.success) {
                        window.location.href = response.redirectToUrl;
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("Bir hata oluştu: " + error);
                }
            });
        });
    });

    // Quill JS başlatma
    const fontSizeArr = ['8px', '9px', '10px', '12px', '14px', '16px', '20px', '24px', '32px', '42px', '54px', '68px', '84px', '98px'];
    const fontFamilyArr = ['Arial', 'Courier New', 'Georgia', 'Times New Roman', 'Verdana', 'Trebuchet MS', 'Comic Sans MS', 'Impact', 'Tahoma', 'Helvetica'];

    var Font = Quill.import('attributors/style/font');
    Font.whitelist = fontFamilyArr;
    Quill.register(Font, true);

    var Size = Quill.import('attributors/style/size');
    Size.whitelist = fontSizeArr;
    Quill.register(Size, true);

    var toolbarOptions = [
        [{ 'font': fontFamilyArr }],
        [{ 'size': fontSizeArr }],
        ['bold', 'italic', 'underline', 'strike'],
        [{ 'color': [] }, { 'background': [] }],
        [{ 'script': 'sub'}, { 'script': 'super' }],
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
        ['blockquote', 'code-block'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],
        [{ 'direction': 'rtl' }],
        [{ 'align': [] }],
        ['link', 'image', 'video'],
        ['clean']
    ];

    var quill = new Quill('#editor-container', {
        modules: {
            toolbar: toolbarOptions,
            imageResize: {}
        },
        theme: 'snow'
    });
</script>














@*<div class="col-lg-12 grid-margin stretch-card" style="background-color: #191c24">
        <div class="card-body">
            <h4 class="card-title">Blog</h4>
            <p class="card-description">Blog Yazma/Ekleme Sayfası</p>
            <form id="blogForm" class="forms-sample">
                <div class="form-group">
                    <label for="Title">Başlık</label>
                    <input type="text" class="form-control" id="title" placeholder="Başlık" />
                </div>
                <div class="form-group">
                    <label for="SubContent">Kısa Açıklama</label>
                    <input type="text" class="form-control" id="SubContent" placeholder="Kısa Açıklama" />
                </div>
                <div class="form-group">
                    <label for="CoverImage">Kapak Resmi</label>
                    <input type="text" class="form-control" id="CoverImage" placeholder="Kapak Resmi" />
                </div>
                <div class="form-group">
                    <label for="PublishDate">Yayımlanma Tarihi</label>
                    <input type="date" class="form-control" id="PublishDate" placeholder="Yayımlanma Tarihi" />
                </div>
                 Taglar kısmını buraya ekle
                </div>
                <div id="editor-container">
                    <p></p>
                </div>
                <br />
                <button type="button" class="btn btn-primary mr-2" id="submitBtn">Ekle</button>
                <button type="button" class="btn btn-info" onclick="history.back()">Geri</button>
            </form>
        </div>
    </div>



    <script>
            // Yazı tipi ve boyut seçeneklerini tanımla

            const fontSizeArr = ['8px', '9px', '10px', '12px', '14px', '16px', '20px', '24px', '32px', '42px', '54px', '68px', '84px', '98px'];

            const fontFamilyArr = [
                'Arial',
                'Courier New',
                'Georgia',
                'Times New Roman',
                'Verdana',
                'Trebuchet MS',
                'Comic Sans MS',
                'Impact',
                'Tahoma',
                'Helvetica'
            ];


            var Font = Quill.import('attributors/style/font');
            Font.whitelist = fontFamilyArr;
            Quill.register(Font, true);

            var Size = Quill.import('attributors/style/size');
            Size.whitelist = fontSizeArr;
            Quill.register(Size, true);
            // Fonksiyonu çağırın

            // Toolbar ayarları
            var toolbarOptions = [
                [{ 'font': fontFamilyArr },],
                [{ 'size': fontSizeArr}],
                ['bold', 'italic', 'underline', 'strike'],
                [{ 'color': [] }, { 'background': [] }],
                [{ 'script': 'sub'}, { 'script': 'super' }],
                [{ 'header': [1, 2, 3, 4, 5, 6,false] }],
                ['blockquote', 'code-block'],
                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                [{ 'indent': '-1'}, { 'indent': '+1' }],
                [{ 'direction': 'rtl' }],
                [{ 'align': [] }],
                ['link', 'image', 'video'],
                ['clean']
            ];

            // Quill'i başlat
            var quill = new Quill('#editor-container', {
                modules: {
                    toolbar: toolbarOptions,
                    imageResize: {}
                },
                theme: 'snow'
            });

            // Yazı tipi seçimini güncelle
            quill.on('selection-change', function(range, oldRange, source) {
                if (range) {
                    var font = quill.getFormat(range).font;
                    if (font) {
                        quill.root.style.fontFamily = font;
                    }
                }
            });


            // AJAX ile formu gönder
        // AJAX ile formu gönder
        document.getElementById('submitBtn').addEventListener('click', function (event) {
            event.preventDefault(); // Varsayılan davranışı engelle

            var content = quill.root.innerHTML; // Quill editör içeriğini al
            var title = document.getElementById('title').value; // Başlık verisini al
            var subContent = document.getElementById('SubContent').value; // Kısa açıklamayı al
            var coverImage = document.getElementById('CoverImage').value; // Kapak resmi URL'sini al
            var publishDate = document.getElementById('PublishDate').value; // Yayımlanma tarihini al

            // FormData objesi oluştur
            var formData = new FormData();
            formData.append("Title", title);
            formData.append("SubContent", subContent);
            formData.append("CoverImage", coverImage);
            formData.append("PublishDate", publishDate);
            formData.append("Content", content);

            // Gönderilecek veriyi kontrol et
            console.log("Gönderilecek veri:", {
                Title: title,
                SubContent: subContent,
                CoverImage: coverImage,
                PublishDate: publishDate,
                Content: content
            });

            // AJAX POST isteği ile veriyi gönder
            $.ajax({
                url: '@Url.Action("CreatePortfolioBlog", "PortfolioBlog")',
                type: 'POST',
                processData: false,  // FormData için bu gerekli
                contentType: false,  // FormData için bu gerekli
                data: formData,
                success: function(response) {
                    console.log("Başarılı yanıt:", response); // Başarı yanıtını kontrol et
                    window.location.href = '@Url.Action("GetAllPortfolioBlog", "PortfolioBlog", new { area = "Admin" })';
                },
                error: function(xhr, status, error) {
                    console.error("Hata: ", error);
                    alert("Ekleme işlemi başarısız oldu. Lütfen tekrar deneyin.");
                }
            });
        });



    </script>*@


