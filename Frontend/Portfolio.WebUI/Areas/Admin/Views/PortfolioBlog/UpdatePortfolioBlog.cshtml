@model Portfolio.WebUI.Models.BlogTagsViewModel
@{
    ViewData["Title"] = "UpdatePortfolioBlog";
    Layout = "~/Areas/Admin/Views/AdminLayout/AdminLayout.cshtml";
}

<link href="~/css/quill.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Arial&family=Courier+New&family=Georgia&family=Times+New+Roman&family=Verdana&family=Trebuchet+MS&family=Comic+Sans+MS&family=Impact&family=Tahoma&family=Helvetica&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.core.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css" />
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<style>
    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }

    .tag {
        background-color: #6c757d;
        color: white;
        border-radius: 15px;
        padding: 5px 10px;
        font-size: 14px;
        cursor: pointer;
    }

    .tag:hover {
        background-color: #5a6268;
    }

    .tag.selected {
        background-color: #007bff;
    }

    .tag-limit-message {
        color: #ff4d4d;
        font-size: 12px;
        margin-top: 5px;
    }
    .category-limit-message {
        color: #ff4d4d;
        font-size: 12px;
        margin-top: 5px;
    }
</style>

<div class="col-lg-12 grid-margin stretch-card" style="background-color: #191c24">
    <div class="card-body">
        <h4 class="card-title">Blog</h4>
        <p class="card-description">Blog Güncelleme Sayfası</p>
        <form id="blogForm" class="forms-sample">
            <input type="hidden" id="PortfolioBlogId" value="@Model.BlogUpdate.PortfolioBlogId" />
            <div class="form-group">
                <label for="Title">Başlık</label>
                <input type="text" class="form-control" id="title" value="@Model.BlogUpdate.Title" placeholder="Başlık" />
            </div>
            <div class="form-group">
                <label for="SubContent">Kısa Açıklama</label>
                <input type="text" class="form-control" id="SubContent" value="@Model.BlogUpdate.SubContent" placeholder="Kısa Açıklama" />
            </div>
            <div class="form-group">
                <label for="CoverImage">Kapak Resmi</label>
                <input type="text" class="form-control" id="CoverImage" value="@Model.BlogUpdate.CoverImage" placeholder="Kapak Resmi" />
            </div>
            <div class="form-group">
                <label for="PublishDate">Yayımlanma Tarihi</label>
                <input type="date" class="form-control" id="PublishDate" value="@Model.BlogUpdate.PublishDate.ToString("yyyy-MM-dd")" placeholder="Yayımlanma Tarihi" />
            </div>
            <div class="form-group">
                <label>Etiketler</label>
                <div id="PortfolioBlogTags" class="tag-container">
                    @foreach (var item in Model.BlogTags)
                    {
                        var isSelected = Model.BlogUpdate.PortfolioBlogTags.Any(t => t.PortfolioBlogTagId == item.PortfolioBlogTagId);
                        <span class="tag @(isSelected ? "selected" : "")" 
                              data-tag="@item.TagName" 
                              data-id="@item.PortfolioBlogTagId">@item.TagName</span>
                    }
                </div>
                <div id="tagLimitMessage" class="tag-limit-message" style="display: none;">Maksimum 4 etiket ekleyebilirsiniz!</div>
            </div>

            <div class="form-group">
                <label>Kategoriler</label>
                <div id="PortfolioBlogCategory" class="tag-container">
                    @foreach (var item in Model.BlogCategories)
                    {
                        var isSelected = Model.BlogUpdate.PortfolioBlogCategories.Any(c => c.BlogCategoryId == item.BlogCategoryId);
                        <span class="tag @(isSelected ? "selected": "")" 
                              data-tag="@item.CategoryName" 
                              data-id="@item.BlogCategoryId">@item.CategoryName</span>
                    }
                </div>
                <div id="CategoryLimitMessage" class="category-limit-message" style="display:none;">Maksimum 4 Kategori seçebilirisiniz!</div>
            </div>

            <div id="editor-container">
                @Html.Raw(Model.BlogUpdate.Content)
            </div>
            <br />
            <button type="button" class="btn btn-primary mr-2" id="submitBtn">Güncelle</button>
            <button type="button" class="btn btn-info" onclick="history.back()">Geri</button>
        </form>
    </div>
</div>

<script>
    let selectedTags = [];
    let selectedCategories = [];
    let quill;

    document.addEventListener("DOMContentLoaded", function () {
        const tagContainer = document.getElementById("PortfolioBlogTags");
        const tagLimitMessage = document.getElementById("tagLimitMessage");
        const maxTags = 4;

        const categoryContainer = document.getElementById("PortfolioBlogCategory");
        const categoryLimitMessage = document.getElementById("CategoryLimitMessage");
        const maxCategory = 4;

        // Başlangıçta seçili olan tag'leri selectedTags array'ine ekle
        document.querySelectorAll('#PortfolioBlogTags .tag.selected').forEach(tag => {
            selectedTags.push({
                tagId: parseInt(tag.getAttribute('data-id')),
                tagName: tag.getAttribute('data-tag')
            });
        });

        // Başlangıçta seçili olan kategorileri selectedCategories array'ine ekle
        document.querySelectorAll('#PortfolioBlogCategory .tag.selected').forEach(category => {
            selectedCategories.push({
                categoryId: parseInt(category.getAttribute('data-id')),
                categoryName: category.getAttribute('data-tag')
            });
        });

        // Başlangıçta limit mesajlarını kontrol et
        if (selectedTags.length >= maxTags) {
            tagLimitMessage.style.display = "block";
        }
        if (selectedCategories.length >= maxCategory) {
            categoryLimitMessage.style.display = "block";
        }

        // Etiket tıklama olayları
        tagContainer.addEventListener("click", function (event) {
            const clickedTag = event.target;

            if (clickedTag.classList.contains("tag")) {
                const tagName = clickedTag.getAttribute("data-tag");
                const tagId = parseInt(clickedTag.getAttribute("data-id"));

                if (clickedTag.classList.contains("selected")) {
                    clickedTag.classList.remove("selected");
                    selectedTags = selectedTags.filter(t => t.tagId !== tagId);
                    tagLimitMessage.style.display = "none";
                } else {
                    if (selectedTags.length < maxTags) {
                        clickedTag.classList.add("selected");
                        selectedTags.push({
                            tagId: tagId,
                            tagName: tagName
                        });
                        if (selectedTags.length >= maxTags) {
                            tagLimitMessage.style.display = "block";
                        }
                    }
                }
            }
        });

        // Kategori tıklama olayları
        categoryContainer.addEventListener("click", function (event) {
            const clickedCategory = event.target;

            if (clickedCategory.classList.contains("tag")) {
                const categoryName = clickedCategory.getAttribute("data-tag");
                const categoryId = parseInt(clickedCategory.getAttribute("data-id"));

                if (clickedCategory.classList.contains("selected")) {
                    clickedCategory.classList.remove("selected");
                    selectedCategories = selectedCategories.filter(t => t.categoryId !== categoryId);
                    categoryLimitMessage.style.display = "none";
                } else {
                    if (selectedCategories.length < maxCategory) {
                        clickedCategory.classList.add("selected");
                        selectedCategories.push({
                            categoryId: categoryId,
                            categoryName: categoryName
                        });
                        if (selectedCategories.length >= maxCategory) {
                            categoryLimitMessage.style.display = "block";
                        }
                    }
                }
            }
        });

        // Form submit işlemi
        document.getElementById("submitBtn").addEventListener("click", function (event) {
            event.preventDefault();

            var content = quill.root.innerHTML;
            var blogId = document.getElementById('PortfolioBlogId').value;
            var title = document.getElementById('title').value;
            var subContent = document.getElementById('SubContent').value;
            var coverImage = document.getElementById('CoverImage').value;
            var publishDate = document.getElementById('PublishDate').value;

            var tagIds = selectedTags.map(tag => tag.tagId);
            var categoryIds = selectedCategories.map(c => c.categoryId);

            console.log('Seçilen Kategori ID\'leri:', categoryIds);

            var blogData = {
                PortfolioBlogId: parseInt(blogId),
                Title: title,
                SubContent: subContent,
                Content: content,
                CoverImage: coverImage,
                PublishDate: publishDate,
                TagIds: tagIds,
                CategoryIds: categoryIds
            };

            console.log('Gönderilecek veri:', blogData);

            $.ajax({
                url: '@Url.Action("UpdatePortfolioBlog", "PortfolioBlog", new { area = "Admin", id = Model.BlogUpdate.PortfolioBlogId })',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: JSON.stringify(blogData),
                success: function (response) {
                    console.log('Başarılı yanıt:', response);
                    if (response.success) {
                        window.location.href = response.redirectToUrl;
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Hata detayları:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                    alert("Bir hata oluştu: " + error);
                }
            });
        });
    });

    // Quill JS başlatma
    document.addEventListener("DOMContentLoaded", function () {
        const fontSizeArr = ['8px', '9px', '10px', '12px', '14px', '16px', '20px', '24px', '32px', '42px', '54px', '68px', '84px', '98px'];
        const fontFamilyArr = ['Arial', 'Courier New', 'Georgia', 'Times New Roman', 'Verdana', 'Trebuchet MS', 'Comic Sans MS', 'Impact', 'Tahoma', 'Helvetica'];

        var Font = Quill.import('attributors/style/font');
        Font.whitelist = fontFamilyArr;
        Quill.register(Font, true);

        var Size = Quill.import('attributors/style/size');
        Size.whitelist = fontSizeArr;
        Quill.register(Size, true);

        var toolbarOptions = [
            [{ 'font': fontFamilyArr }],
            [{ 'size': fontSizeArr }],
            ['bold', 'italic', 'underline', 'strike'],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'script': 'sub'}, { 'script': 'super' }],
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            ['blockquote', 'code-block'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            [{ 'indent': '-1'}, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'align': [] }],
            ['link', 'image', 'video'],
            ['clean']
        ];

        quill = new Quill('#editor-container', {
            modules: {
                toolbar: toolbarOptions,
                imageResize: {}
            },
            theme: 'snow'
        });

        // Veritabanından gelen içeriği modelden almak
        var contentFromModel = '@Html.Raw(Json.Serialize(Model.BlogUpdate.Content))';
        
        // Baş ve sondaki tırnak işaretlerini temizlemek
        contentFromModel = contentFromModel.replace(/^"|"$/g, '');
        
        // HTML entity'lerini temizlemek
        var contentHTML = contentFromModel
            .replace(/&quot;/g, '"')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&');
        
        // Quill editörüne içeriği aktar
        quill.root.innerHTML = contentHTML;
    });
</script>
